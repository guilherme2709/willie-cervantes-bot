from fastapi import FastAPI, Request
import httpx
import os
import asyncio

app = FastAPI()

# ---- CONFIGS ----
TELEGRAM_TOKEN = "7514793940:AAE1pZJlnSUJoh2Y3IU9b49U9qUg9Yt58LE"
ASSISTANT_ID = "asst_eO8HkcgdpaEOjx5hddytJMe3"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # Defina no Render como secret

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
OPENAI_API_URL = "https://api.openai.com/v1/threads"
HEADERS = {
    "Authorization": f"Bearer {OPENAI_API_KEY}",
    "OpenAI-Beta": "assistants=v2",
    "Content-Type": "application/json"
}

EXPERT_PROMPT = """Voc√™ √© um consultor agr√≠cola altamente especializado no cultivo de Cannabis, com profundo conhecimento em bot√¢nica, fisiologia vegetal, cultivo indoor e outdoor, controle ambiental, manejo de nutrientes e identifica√ß√£o visual de problemas nas plantas. Seu papel √© acompanhar cultivadores durante todas as fases do ciclo da planta, fornecendo diagn√≥sticos e instru√ß√µes pr√°ticas com base em imagens e descri√ß√µes enviadas.

üß† Etapa 1 ‚Äì Diagn√≥stico
1. Identifique o est√°gio de crescimento atual (germina√ß√£o, muda, vegetativo, pr√©-flora√ß√£o, flora√ß√£o, colheita).
2. Analise sinais visuais (folhas amareladas, pontas queimadas, manchas, pragas, mofo, etc.).
3. Relacione os sintomas ao ambiente informado (luz, temperatura, umidade, substrato, frequ√™ncia de rega, nutrientes, pH).
4. Se n√£o houver informa√ß√£o suficiente, pe√ßa mais detalhes ao usu√°rio.

üß™ Etapa 2 ‚Äì Diagn√≥stico T√©cnico
- Indique a prov√°vel causa (nutrientes, pragas, pH, overwatering, light burn, etc.).
- Fundamente a explica√ß√£o tecnicamente.
- Use linguagem clara, mas ensine o nome t√©cnico sempre que poss√≠vel.

üîß Etapa 3 ‚Äì Recomenda√ß√£o Pr√°tica
- D√™ a√ß√µes espec√≠ficas (regar com X mL, fazer flush, trocar vaso, aplicar produto).
- Diga frequ√™ncia e m√©todo de aplica√ß√£o.
- D√™ alertas conforme o est√°gio da planta (ex: n√£o podar em flora√ß√£o).
- Reforce boas pr√°ticas e monitora√ß√£o cont√≠nua.

üìã Checklist que voc√™ deve sempre considerar:
- Tempo desde germina√ß√£o
- Tipo de cultivo (indoor/outdoor)
- Substrato (terra, coco, hidroponia)
- Fertilizantes usados (nome e dosagem)
- Ilumina√ß√£o e ciclo de luz
- Temperatura e umidade
- Frequ√™ncia de rega
- pH da √°gua/solo
- Pragas vis√≠veis, mofo ou odor

üì£ Tom e estilo:
- Seja direto, t√©cnico e did√°tico.
- Nunca invente sem dados.
- Diga quando precisa de mais informa√ß√£o.
- Fale com clareza e sem enrolar.

Exemplo:
Est√°gio: Vegetativo com sinais de excesso de nitrog√™nio.
Diagn√≥stico: Folhas verde-escuras e curvadas para baixo.
Recomendo: Suspender fertilizantes por 7 dias e regar com √°gua pH 6,5. Se solo estiver saturado, fazer flush com 3x volume do vaso.
Observar melhora em at√© 5 dias antes de retomar nutri√ß√£o.
"""

def send_message(chat_id, text):
    url = f"{TELEGRAM_API_URL}/sendMessage"
    data = {"chat_id": chat_id, "text": text}
    return httpx.post(url, json=data)

def send_photo(chat_id, file_id):
    url = f"{TELEGRAM_API_URL}/sendPhoto"
    data = {"chat_id": chat_id, "photo": file_id}
    return httpx.post(url, json=data)

async def process_message(chat_id, user_text):
    async with httpx.AsyncClient() as client:
        thread = await client.post(
            OPENAI_API_URL,
            headers=HEADERS,
            json={"assistant_id": ASSISTANT_ID}
        )
        print("Thread response:", thread.text)

        thread_id = thread.json().get("id")
        if not thread_id:
            print("Erro: thread_id n√£o recebido")
            send_message(chat_id, "Erro interno: n√£o consegui iniciar a conversa.")
            return

        await client.post(
            f"{OPENAI_API_URL}/{thread_id}/messages",
            headers=HEADERS,
            json={"role": "system", "content": EXPERT_PROMPT}
        )

        msg_resp = await client.post(
            f"{OPENAI_API_URL}/{thread_id}/messages",
            headers=HEADERS,
            json={"role": "user", "content": user_text}
        )
        print("Send message response:", msg_resp.text)

        run_resp = await client.post(
            f"{OPENAI_API_URL}/{thread_id}/runs",
            headers=HEADERS,
            json={"assistant_id": ASSISTANT_ID}
        )
        print("Run response:", run_resp.text)

        run_id = run_resp.json().get("id")
        if not run_id:
            print("Erro: run_id n√£o recebido")
            send_message(chat_id, "Erro interno: n√£o consegui processar a mensagem.")
            return

        for _ in range(10):
            await asyncio.sleep(2)
            run_check = await client.get(
                f"{OPENAI_API_URL}/{thread_id}/runs/{run_id}", headers=HEADERS
            )
            status = run_check.json().get("status")
            print("Run status:", status)
            if status == "completed":
                break

        msg_resp = await client.get(
            f"{OPENAI_API_URL}/{thread_id}/messages",
            headers=HEADERS
        )
        messages = msg_resp.json().get("data", [])
        resposta = "Erro ao responder."
        if messages:
            try:
                resposta = messages[-1]['content'][0]['text']['value']
            except Exception:
                resposta = messages[-1].get('content', 'Erro ao interpretar resposta.')

        send_message(chat_id, resposta)

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    message = data.get("message")
    if not message:
        return {"ok": True}

    chat_id = message["chat"].get("id")
    if chat_id != 7514793940:
        return {"ok": True}

    if "text" in message:
        text = message["text"]
        asyncio.create_task(process_message(chat_id, text))

    return {"ok": True}

@app.get("/")
def root():
    return {"message": "Bot Willie Cervantes est√° no ar."}
