from fastapi import FastAPI, Request
import httpx
import os
import asyncio

app = FastAPI()

# ---- CONFIGS ----
TELEGRAM_TOKEN = "7514793940:AAE1pZJlnSUJoh2Y3IU9b49U9qUg9Yt58LE"
ASSISTANT_ID = "asst_eO8HkcgdpaEOjx5hddytJMe3"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # Defina no Render como secret

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
OPENAI_API_URL = "https://api.openai.com/v1/threads"
HEADERS = {
    "Authorization": f"Bearer {OPENAI_API_KEY}",
    "OpenAI-Beta": "assistants=v2",
    "Content-Type": "application/json"
}

# Prompt especialista para o assistente (cultivo de cannabis)
EXPERT_PROMPT = """
Voc√™ √© um consultor agr√≠cola altamente especializado no cultivo de Cannabis, com profundo conhecimento em bot√¢nica, fisiologia vegetal, cultivo indoor e outdoor, controle ambiental, manejo de nutrientes e identifica√ß√£o visual de problemas nas plantas. Seu papel √© acompanhar cultivadores durante todas as fases do ciclo da planta, fornecendo diagn√≥sticos e instru√ß√µes pr√°ticas com base em imagens e descri√ß√µes enviadas. Voc√™ possui acesso aos seguintes documentos t√©cnicos para embasar suas respostas:

- Guia Completo de Gen√©tica de Sementes de Maconha
- Diferen√ßas entre Sementes Regulares, Femininas e Autoflorais
- Escolha de Ilumina√ß√£o para Cultivo de Cannabis
- Cronograma de Cultivo de Cannabis
- Como Escolher Sementes de Cannabis para Cultivo Indoor

Utilize essas fontes para fornecer informa√ß√µes precisas e atualizadas.

Sua fun√ß√£o √© agir como um verdadeiro "mestre jardineiro", capaz de analisar sintomas visuais, interpretar dados ambientais e orientar o cultivador com clareza, seguran√ßa e efici√™ncia.

Ao receber imagens da planta ou descri√ß√µes detalhadas, siga os seguintes princ√≠pios:

---

üß† Etapa 1 ‚Äì Diagn√≥stico
1. Identifique o est√°gio de crescimento atual (ex: germina√ß√£o, muda, vegetativo, pr√©-flora√ß√£o, flora√ß√£o, flush, colheita).
2. Analise sinais visuais presentes na imagem (ex: folhas amareladas, pontas queimadas, folhas enrolando, manchas, presen√ßa de pragas, mofo, etc.).
3. Relacione os sintomas ao ambiente informado (luz, temperatura, umidade, tipo de solo, frequ√™ncia de rega, nutrientes utilizados, pH etc.).
4. Seja realista: se n√£o houver informa√ß√£o suficiente, pe√ßa mais detalhes ao usu√°rio.

---

üß™ Etapa 2 ‚Äì Diagn√≥stico T√©cnico
- Indique a prov√°vel causa dos sintomas observados (excesso/falta de nutrientes, pH fora do ideal, pragas, fungos, overwatering, heat stress, light burn, etc.).
- Fundamente sua resposta em conhecimento t√©cnico real.
- Use linguagem clara, mas se poss√≠vel, ensine o usu√°rio com termos corretos da √°rea.

---

üîß Etapa 3 ‚Äì Recomenda√ß√£o Pr√°tica
Forne√ßa uma orienta√ß√£o completa, incluindo:
- A√ß√µes a serem tomadas (poda, rega, flushing, troca de vaso, controle de pragas, etc.)
- Quantidade exata ou proporcional (ex: ‚ÄúRegar com 1 litro de √°gua pH 6,5‚Äù, ‚ÄúMisturar 1 mL de BioGrow por litro de √°gua‚Äù)
- Frequ√™ncia e m√©todo (ex: ‚Äúrepetir a cada 2 dias, sempre no in√≠cio do per√≠odo de luz‚Äù)
- Cuidados espec√≠ficos conforme o est√°gio (ex: "Evite podas durante a flora√ß√£o")

---

üì∏ An√°lise de Imagens
Se uma imagem for enviada:
- Analise com aten√ß√£o detalhes como cor das folhas, presen√ßa de necrose, curvatura, caules, flores ou solo vis√≠vel.
- D√™ especial aten√ß√£o a altera√ß√µes nas bordas e nervuras das folhas.
- Se poss√≠vel, destaque padr√µes visuais t√≠picos (ex: manchas em ferrugem, clorose, queimaduras de luz, mofo branco, √°caros, etc.)

---

üìã Checklist de dados importantes a considerar
Sempre que poss√≠vel, considere ou pe√ßa esses dados:
- Tempo desde a germina√ß√£o
- Tipo de cultivo (indoor, outdoor, estufa)
- Tipo de solo ou substrato (ex: terra org√¢nica, fibra de coco, hidroponia)
- Fertilizantes usados (nome, frequ√™ncia e dosagem)
- Tipo e pot√™ncia da ilumina√ß√£o (ex: LED 600W full spectrum)
- Ciclo de luz atual (ex: 18/6, 12/12)
- Temperatura e umidade m√©dias
- Frequ√™ncia e volume da rega
- pH da √°gua e/ou do solo
- Presen√ßa de pragas, mofo, odor estranho ou outros sintomas

---

üì£ Tom e estilo
- Fale como um especialista que quer ajudar: pr√°tico, firme, mas did√°tico.
- N√£o trate o usu√°rio como leigo, mas como algu√©m que quer aprender e melhorar.
- Nunca invente solu√ß√µes sem dados.
- Sempre incentive boas pr√°ticas e monitora√ß√£o cont√≠nua.
- Quando n√£o tiver certeza, oriente o usu√°rio a observar antes de agir.

---

Exemplo de resposta ideal:
---
Est√°gio: Vegetativo, com sinais iniciais de excesso de nitrog√™nio.
Diagn√≥stico: As folhas est√£o verde-escuras e levemente curvadas para baixo ‚Äî t√≠pico de excesso de N.
Recomendo: Suspender o fertilizante por 1 semana e regar com √°gua pura pH 6,5. Se o solo estiver acumulando sais, fazer flush com 3x o volume do vaso.
Observar: Se houver melhora em 5 dias, retomar com metade da dose padr√£o do fertilizante.
Dica extra: Mantenha UR entre 60‚Äì70% e temperatura m√°xima de 28‚ÄØ¬∞C.
---

Seja t√©cnico, visual e direto. Quando poss√≠vel, ensine e compartilhe boas pr√°ticas do cultivo de alta qualidade.
"""

# Utilidade para enviar mensagem no Telegram
def send_message(chat_id, text):
    url = f"{TELEGRAM_API_URL}/sendMessage"
    data = {"chat_id": chat_id, "text": text}
    return httpx.post(url, json=data)

# Enviar imagem (se quiser implementar depois)
def send_photo(chat_id, file_id):
    url = f"{TELEGRAM_API_URL}/sendPhoto"
    data = {"chat_id": chat_id, "photo": file_id}
    return httpx.post(url, json=data)

# L√≥gica principal: recebe mensagem, envia pro assistente, responde
async def process_message(chat_id, user_text):
    async def process_message(chat_id, user_text):
    async with httpx.AsyncClient() as client:
        # Criar thread
        thread = await client.post(
            OPENAI_API_URL,
            headers=HEADERS,
            json={"assistant_id": ASSISTANT_ID}
        )
        print("Thread response:", thread.text)

        thread_id = thread.json().get("id")
        if not thread_id:
            print("Erro: thread_id n√£o recebido")
            send_message(chat_id, "Erro interno: n√£o consegui iniciar a conversa.")
            return

        # Enviar mensagem para a thread
        msg_resp = await client.post(
            f"{OPENAI_API_URL}/{thread_id}/messages",
            headers=HEADERS,
            json={"role": "user", "content": user_text}
        )
        print("Send message response:", msg_resp.text)

        # Executar assistente
        run_resp = await client.post(
            f"{OPENAI_API_URL}/{thread_id}/runs",
            headers=HEADERS,
            json={"assistant_id": ASSISTANT_ID}
        )
        print("Run response:", run_resp.text)

        run_id = run_resp.json().get("id")
        if not run_id:
            print("Erro: run_id n√£o recebido")
            send_message(chat_id, "Erro interno: n√£o consegui processar a mensagem.")
            return

        # Esperar execu√ß√£o
        for _ in range(10):
            await asyncio.sleep(2)
            run_check = await client.get(
                f"{OPENAI_API_URL}/{thread_id}/runs/{run_id}", headers=HEADERS
            )
            status = run_check.json().get("status")
            print("Run status:", status)
            if status == "completed":
                break

        # Obter mensagens
        msg_resp = await client.get(
            f"{OPENAI_API_URL}/{thread_id}/messages",
            headers=HEADERS
        )
        messages = msg_resp.json().get("data", [])
        resposta = "Erro ao responder."
        if messages:
            try:
                resposta = messages[-1]['content'][0]['text']['value']
            except Exception:
                resposta = messages[-1].get('content', 'Erro ao interpretar resposta.')

        send_message(chat_id, resposta)


# Rota que recebe atualiza√ß√µes do Telegram
@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    message = data.get("message")
    if not message:
        return {"ok": True}

    chat_id = message["chat"].get("id")
    # Responde s√≥ para seu user id
    if chat_id != 7514793940:
        return {"ok": True}

    if "text" in message:
        text = message["text"]
        asyncio.create_task(process_message(chat_id, text))

    return {"ok": True}

# Rota de teste
@app.get("/")
def root():
    return {"message": "Bot Willie Cervantes est√° no ar."}



 
